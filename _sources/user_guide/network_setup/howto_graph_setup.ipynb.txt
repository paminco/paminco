{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Graph Setup and Representations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Denote $G = (V, E)$ a ``graph``, where $V$ are the vertices or nodes and $E$ are the links or edges. \n",
    "This notebook shows how to setup directed and undirected graphs, how to access different graph respresentations \n",
    "and how to specify labels to indices mappings. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1 Directed graphs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A ``directed graph`` is characterized by the direction of the edge flow, i.e., units can only travel along the edge in one direction.\n",
    "Consider the following directed graph:\n",
    "<center> \n",
    "<img src=\"img/dir_graph.jpg\" width=\"500\">\n",
    "</center>\n",
    "\n",
    "that connectects the four vertices $A, B, C, D$ with the five directed links $e_1, e_2, e_3, e_4$ and  $e_5$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.1 Setup"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can setup the above graph with paminco:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>source_lbl</th>\n",
       "      <th>target_lbl</th>\n",
       "      <th>s</th>\n",
       "      <th>t</th>\n",
       "      <th>lb</th>\n",
       "      <th>ub</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>A</td>\n",
       "      <td>B</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>-inf</td>\n",
       "      <td>inf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>A</td>\n",
       "      <td>C</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>-inf</td>\n",
       "      <td>inf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>B</td>\n",
       "      <td>C</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>-inf</td>\n",
       "      <td>inf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>B</td>\n",
       "      <td>D</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>-inf</td>\n",
       "      <td>inf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>C</td>\n",
       "      <td>D</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>-inf</td>\n",
       "      <td>inf</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  source_lbl target_lbl  s  t   lb   ub\n",
       "0          A          B  0  1 -inf  inf\n",
       "1          A          C  0  2 -inf  inf\n",
       "2          B          C  1  2 -inf  inf\n",
       "3          B          D  1  3 -inf  inf\n",
       "4          C          D  2  3 -inf  inf"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import sys\n",
    "REL_DIR  = \"../../../..\"\n",
    "sys.path.append(REL_DIR)\n",
    "\n",
    "import numpy as np\n",
    "import paminco\n",
    "\n",
    "edge_data = np.array([\n",
    "    [\"A\", \"B\"],\n",
    "    [\"A\", \"C\"],\n",
    "    [\"B\", \"C\"],\n",
    "    [\"B\", \"D\"],\n",
    "    [\"C\", \"D\"],\n",
    "])\n",
    "\n",
    "graph = paminco.Network(edge_data, kw_edge={\"directed\": False})\n",
    "graph.edges.to_df()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.2 Representations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A graph can be represented by its $n \\times n$ adjacency matrix, which store as a sparse matrix:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 1., 1., 0.],\n",
       "       [0., 0., 1., 1.],\n",
       "       [0., 0., 0., 1.],\n",
       "       [0., 0., 0., 0.]])"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "graph.adjacency_matrix().toarray()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "or its $n \\times m$ incidence matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-1, -1,  0,  0,  0],\n",
       "       [ 1,  0, -1, -1,  0],\n",
       "       [ 0,  1,  1,  0, -1],\n",
       "       [ 0,  0,  0,  1,  1]], dtype=int32)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "graph.incidence_matrix().toarray()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1.2.1 Adjacency matrix"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1.2.2 Incidence matrix"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1.2.3 Laplacian matrix"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.3 Edge bounds"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Depending on the specific problem, each edge may only allow a certain maximum of flow on the edge, i.e., it has an ``upper bound``. By default these bounds are $(0, \\infty)$ for directed edges. However, it is possible to pass individual flow bounds for each edge:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>source_lbl</th>\n",
       "      <th>target_lbl</th>\n",
       "      <th>s</th>\n",
       "      <th>t</th>\n",
       "      <th>lb</th>\n",
       "      <th>ub</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>A</td>\n",
       "      <td>B</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>A</td>\n",
       "      <td>C</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>4.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>B</td>\n",
       "      <td>C</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>300.0</td>\n",
       "      <td>400.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>B</td>\n",
       "      <td>D</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>80000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>C</td>\n",
       "      <td>D</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>12.0</td>\n",
       "      <td>12.1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  source_lbl target_lbl  s  t     lb       ub\n",
       "0          A          B  0  1    1.0    100.0\n",
       "1          A          C  0  2    4.0      5.0\n",
       "2          B          C  1  2  300.0    400.0\n",
       "3          B          D  1  3    0.0  80000.0\n",
       "4          C          D  2  3   12.0     12.1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "edge_labels = np.array([\n",
    "    [\"A\", \"B\"],\n",
    "    [\"A\", \"C\"],\n",
    "    [\"B\", \"C\"],\n",
    "    [\"B\", \"D\"],\n",
    "    [\"C\", \"D\"],\n",
    "])\n",
    "edge_bounds = np.array([\n",
    "    [1, 100],\n",
    "    [4, 5],\n",
    "    [300, 400],\n",
    "    [0, 80000],\n",
    "    [12, 12.1],\n",
    "])\n",
    "edge_data = (edge_labels, edge_bounds)\n",
    "\n",
    "graph = paminco.Network(edge_data)\n",
    "graph.edges.to_df()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2 Undirected graphs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.1 Setup"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.2 Representations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.2.1 Adjacency matrix"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.2.2 Incidence matrix"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.2.3 Laplacian matrix"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.3 Edge bounds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 1., 1., 0.],\n",
       "       [0., 0., 1., 1.],\n",
       "       [0., 0., 0., 1.],\n",
       "       [0., 0., 0., 0.]])"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "graph.csgraph(respect_bounds=False).toarray()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 1., 1., 0.],\n",
       "       [0., 0., 1., 1.],\n",
       "       [0., 0., 0., 1.],\n",
       "       [0., 0., 0., 0.]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "graph.csgraph(respect_bounds=False).toarray()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Labels to indices mapping"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In a network, the ``nodes`` objects handles the mapping of labels to indices, which influences the graph representation.\n",
    "The mapping is accessed by:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'A': 0, 'B': 1, 'C': 2, 'D': 3}"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "graph.nodes.lbl2id"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is possible to set a mapping in two ways:\n",
    "\n",
    "1) pass in indices in node data\n",
    "2) specfiy mapping for edge constructor"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.1 Pass indices in node data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'C': 0, 'B': 1, 'D': 2, 'A': 3}"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "labels = [\"A\", \"B\", \"C\", \"D\"]\n",
    "indices = [3, 1, 0, 2]\n",
    "zone = False\n",
    "xy = [(0, 0), (4, 3), (8, 8), (1, 9)]\n",
    "node_data = (labels, indices, xy, zone)\n",
    "\n",
    "g = paminco.Network(edge_data, node_data)\n",
    "g.nodes.lbl2id"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "E.g., compare the indicence matrices, where the specified mapping changes to row order:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0,  1,  1,  0, -1],\n",
       "       [ 1,  0, -1, -1,  0],\n",
       "       [ 0,  0,  0,  1,  1],\n",
       "       [-1, -1,  0,  0,  0]], dtype=int32)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g.incidence_matrix().toarray()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-1, -1,  0,  0,  0],\n",
       "       [ 1,  0, -1, -1,  0],\n",
       "       [ 0,  1,  1,  0, -1],\n",
       "       [ 0,  0,  0,  1,  1]], dtype=int32)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "graph.incidence_matrix().toarray()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For more information see documentation of Nodes:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Class that contains the nodes/vertices of a network.\n",
      "    \n",
      "    A Nodes object can be instantiated in several ways:\n",
      "        Nodes(n)\n",
      "            where ``n`` is a Nodes object.\n",
      "        Nodes(nodes)\n",
      "            where ``nodes`` is array_like and contains either node\n",
      "            labels or node indices. If no indices are given, they\n",
      "            are set automatically.\n",
      "        Nodes(nodes, zone)\n",
      "            where ``nodes`` and ``zone`` are array_like of shape (n, ).\n",
      "            ``zone`` must be boolean array denoting if a node is a\n",
      "            zone, mostly used for traffic networks.\n",
      "        Nodes(nodes, xy, zone)\n",
      "            where ``nodes`` and ``zone`` are array_like of shape (n, )\n",
      "            and ``xy`` is array_like of shape (n, 2) and contains the\n",
      "            coordinates of the nodes.\n",
      "        Nodes(node_labels, node_indices, xy, zone)\n",
      "            where ``node_labels`` and ``node_indices`` and ``zone``\n",
      "            are are array_like of shape (n, ) and ``xy`` is array_like\n",
      "            of shape (n, 2).\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(paminco.net.Nodes.__doc__[:1010])  # smaller version of paminco.net.Nodes?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.2 Specifing label mapping in edges"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can achieve the same by specfying a ``map_labels_to_indices`` mapping in edges:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 0, 0, 0, 0],\n",
       "       [0, 0, 0, 0, 0],\n",
       "       [0, 0, 0, 0, 0],\n",
       "       [0, 0, 0, 0, 0]], dtype=int32)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "edge_data = np.array([\n",
    "    [\"A\", \"B\"],\n",
    "    [\"A\", \"C\"],\n",
    "    [\"B\", \"C\"],\n",
    "    [\"B\", \"D\"],\n",
    "    [\"C\", \"D\"],\n",
    "])\n",
    "mapping = {'C': 0, 'B': 1, 'D': 2, 'A': 3}\n",
    "g2 = paminco.Network(edge_data, kw_edge={\"map_labels_to_indices\": mapping}, dtype_int=np.int64)\n",
    "g2.incidence_matrix().toarray() - g.incidence_matrix().toarray()"
   ]
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "219b3df7192d91ed2c6095be311216c9c65acbd817ae748f854d329ca7110587"
  },
  "kernelspec": {
   "display_name": "Python 3.8.8 64-bit ('flowing': conda)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
